{"version":3,"sources":["Constants/index.js","Reducers/index.js","Store/index.js","Actions/index.js","Components/Header/Header.js","Components/Cards/Card1/Card1.js","Actions/middleware.js","Components/Duration/index.js","Components/Channels/index.js","Components/Categories/index.js","Containers/Homepage/index.js","App.js","index.js"],"names":["initialState","items","chart1","data","loaded","chart2","chart3","chart4","Date","prototype","getFullMonth","this","getMonth","rootReducer","combineReducers","itemReducer","state","arguments","length","undefined","action","type","Object","objectSpread","toConsumableArray","payload","chartReducer","itemLoading","status","itemLoadingError","store","createStore","applyMiddleware","thunk","fetchDataLoading","fetchDataSuccess","fetchDataFailure","Header","react_default","a","createElement","Fragment","useStyle","makeStyles","root","boxShadow","Card1","_ref","onClickFunction","onClick","children","classes","Card","className","convertToSeconds","duration","newDuration","moment","Math","min","asSeconds","timeData","categoryObj","channels","durations","_iterator","s","_step","n","done","item","value","getDurationAndCountBy","time","push","date","toDateString","month","year","getFullYear","buildChart1","dispatch","buildChart2","buildChart4","factor","object","key","search","split","AddOrUpdate","_step2","_iterator2","_createForOfIteratorHelper","err","e","f","itemDuration","count","DurationChart","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","chartRef","React","createRef","renderChart","bind","assertThisInitialized","rawData","chartData","unit","myChartRef","current","getContext","timeUnitNumber","timeUnit","labels","reduce","rv","x","itemDate","getDate","parseInt","reverse","Chart","datasets","label","options","console","log","_this2","ButtonGroup","style","display","justifyContent","size","aria-label","Button","id","ref","Component","connect","bindActionCreators","ChannelChart","renderBarChart","toLowerCase","y","sort","b","slice","barChartData","XAxisTitle","setState","react_vis_es","yType","width","height","margin","left","right","top","bottom","title","animation","color","CategoryChart","renderPieChart","arrayOfCategories","name","number","Number","Categories_createForOfIteratorHelper","category","backgroundColor","borderColor","borderWidth","categoryChartData","react_chartjs_2_es","scale","ticks","beginAtZero","Homepage","Components_Header_Header","Grid","container","spacing","xs","Cards_Card1_Card1","Channels","Duration","Categories","App","Containers_Homepage","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1192d88c.chunk.js","sourcesContent":["export const FETCH_DATA = 'FETCH_DATA';\nexport const FETCH_DATA_LOADING = 'FETCH_DATA_LOADING';\nexport const FETCH_DATA_LOADING_SUCCESS = 'FETCH_DATA_LOADING_SUCCESS';\nexport const FETCH_DATA_LOADING_FAILURE = 'FETCH_DATA_LOADING_FAILURE';\nexport const CHART1_DATA_LOADING_SUCCESS = 'CHART1_DATA_LOADING_SUCCESS';\nexport const CHART2_DATA_LOADING_SUCCESS = 'CHART2_DATA_LOADING_SUCCESS';\nexport const CHART3_DATA_LOADING_SUCCESS = 'CHART3_DATA_LOADING_SUCCESS';\nexport const CHART4_DATA_LOADING_SUCCESS = 'CHART4_DATA_LOADING_SUCCESS';\n\nexport const rootURL = 'https://jsonplaceholder.typicode.com/todos/1';\n\nexport const initialState = {\n    items: [],\n    chart1: {\n        data: [],\n        loaded: false\n    },\n    chart2: {\n        data: {},\n        loaded: false\n    },\n    chart3: {\n        data: {},\n        loaded: false\n    },\n    chart4: {\n        data: {},\n        loaded: false\n    }\n}\n\nDate.prototype.getFullMonth = function () {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n    return months[this.getMonth()];\n}","import {FETCH_DATA_LOADING,FETCH_DATA_LOADING_SUCCESS,FETCH_DATA_LOADING_FAILURE,initialState, CHART1_DATA_LOADING_SUCCESS, CHART2_DATA_LOADING_SUCCESS, CHART3_DATA_LOADING_SUCCESS, CHART4_DATA_LOADING_SUCCESS} from '../Constants';\nimport { combineReducers } from 'redux';\n\nexport const itemReducer = (state = initialState,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                items: [...action.payload]\n            }\n        default:\n            return state;\n    }\n}\n\nexport const chartReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case CHART1_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart1: {...action.payload},\n            }\n        case CHART2_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart2: {...action.payload}\n            }\n        case CHART3_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart3: {...action.payload}\n            }\n        case CHART4_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart4: {...action.payload}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const itemLoading = (state = false,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING:\n            return action.status\n        default:\n            return state;\n    }\n} \n\nexport const itemLoadingError = (state = false,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING_FAILURE:\n            return action.status\n        default:\n            return state;\n    }\n}\n\nexport const rootReducer = combineReducers({\n    itemReducer,\n    chartReducer,\n    itemLoading,\n    itemLoadingError\n});\n\nexport default rootReducer;\n\n","import { createStore,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n\n//const store = createStore(rootReducer);\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nexport default store;","import {FETCH_DATA_LOADING_SUCCESS, FETCH_DATA_LOADING_FAILURE, FETCH_DATA_LOADING, CHART1_DATA_LOADING_SUCCESS, CHART2_DATA_LOADING_SUCCESS, CHART4_DATA_LOADING_SUCCESS} from '../Constants';\n\nexport const fetchDataLoading = (status) => {\n    return {\n        type: FETCH_DATA_LOADING,\n        status\n    }\n}\n\nexport const fetchDataSuccess = (data) => {\n    return {\n        type: FETCH_DATA_LOADING_SUCCESS,\n        payload: data\n    }\n}\n\nexport const fetchDataFailure = (status) => {\n    return {\n        type: FETCH_DATA_LOADING_FAILURE,\n        status\n    }\n}\n\nexport const fetchChart1 = (data) => {\n    return {\n        type: CHART1_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\nexport const fetchChart2 = (data) => {\n    return {\n        type: CHART2_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\nexport const fetchChart4 = (data) => {\n    return {\n        type: CHART4_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\n// export const fetchData = (url) => {\n//     return (dispatch) => {\n//         dispatch(fetchDataLoading(true));\n\n//         dispatch(fetchDataSuccess(data.durations));\n//         // dispatch(buildChart1(data.durations));\n//         // dispatch(getCategories(data.durations));\n//         // dispatch(buildChart3(data.durations));\n\n//         dispatch(fetchDataLoading(false));\n//         // fetch(url)\n//         //     .then(response => {\n//         //         dispatch(fetchDataLoading(false));\n//         //         return response;\n//         //     })\n//         //     .then(response => response.json())\n//         //     .then(items => dispatch(fetchDataSuccess(items)))\n//         //     .catch(error => dispatch(fetchDataFailure(error)))\n//     }\n// }","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <>\n        <h1>Visualizing the YouTube Data of</h1>\n        <h2>Utkarsh Singh</h2>\n        <hr></hr>\n        </>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Card, makeStyles } from '@material-ui/core';\n\nconst useStyle = makeStyles(() => ({\n    root: {\n        // height: '200px',\n        boxShadow: '5px 10px 5px #aaaaaa'\n    }\n}))\n\nconst Card1 = ({ onClick: onClickFunction, children }) => {\n    const classes = useStyle();\n    return (\n        <Card onClick={onClickFunction ? () => onClickFunction() : null} className={classes.root}>\n            {children}\n        </Card>\n    )\n}\n\nexport default Card1;","import data from '../Constants/db.json';\nimport { fetchChart1, fetchChart2, fetchChart4 } from './index';\n\nimport * as moment from 'moment';\n\n/**\n * Converts time in ISO format 8601 to time in seconds\n * @param {number} duration \n */\nconst convertToSeconds = (duration) => {\n    const newDuration = moment.duration(duration, moment.ISO_8601);\n    return Math.min(1800, newDuration.asSeconds());\n}\n\nlet timeData = [], /* List of objects containing {duration, date, month, year} of each video item */\n    categoryObj = {}, /* Key - categoryName, Value - {duration: summed up duration of all videos, count: total count of all videos containing this category} */\n    channels = {} /* Key - channelName, Value - {duration: summed up duration of all videos, count: total count of all videos containing this category} */\n\n/* Building the arrays and objects for different charts */\nfor(let item of data.durations) {\n\n    categoryObj = getDurationAndCountBy('category', categoryObj, item);\n\n    channels = getDurationAndCountBy('snippet.channelTitle', channels, item);\n\n    const time = new Date(item.time);\n    timeData.push({\n        duration: convertToSeconds(item.duration),\n        date: time.toDateString(),\n        month: time.getMonth(),\n        year: time.getFullYear()\n    });\n}\n\nexport const buildChart1 = () => {\n    /**\n     * To Plot:\n     * Y-AXIS: duration of watching videos\n     * X-AXIS: day/date/month/year\n     */ \n    return dispatch => {\n        return dispatch(fetchChart1(timeData))\n    }\n}\n\nexport const buildChart2 = () => {\n    /**\n     * To Plot:\n     * Y-AXIS: Duration/Count of videos,\n     * X-AXIS: Category\n     */\n    return dispatch => {\n        dispatch(fetchChart2(categoryObj))    \n    };\n}\n\nexport const buildChart4 = () => {\n    /**\n     * To Plot:\n     * Y-AXIS: Duration/Count of videos\n     * X-AXIS: ChannelNumber\n    */\n    return dispatch => {\n        dispatch(fetchChart4(channels));\n    }\n}\n\n/**\n* Update the object using item and factor.\n* Add/Update the key in object; key is item[factor]\n* @param {string} factor\n* @param {object} object\n* @param {object} item\n*/\nfunction getDurationAndCountBy (factor, object, item) {\n    /** \n     *  If there are more such 'factors' that are needed to be visualized, this function can be reused,\n     *  along with more if-else blocks (if needed)\n    */\n\n    /** \n     * Extracting the key value from item object\n     * If factor is category: key = item.category\n     * If factor is snippet.channelTitle: key = item.snippet.channelTitle\n    */\n    const key = factor.search(/\\./) !== -1 ? item[factor.split(/\\./)[0]][factor.split(/\\./)[1]] : item[factor];\n\n    /* For each item, there is one channelTitle, hence the key will be a string */\n    if (typeof key === 'string') {\n        object = AddOrUpdate(object, key, item.duration);\n    } else { \n        /* When category factor returns an array of categories for each item */\n        for (let eachKey of key) {\n            object = AddOrUpdate(object, eachKey, item.duration);\n        }\n    }\n\n    /* Return updated object */\n    return object;\n}\n\n/**\n * \n * @param {object} object \n * @param {string} key \n * @param {number} itemDuration \n */\nfunction AddOrUpdate(object, key, itemDuration) {\n    /* Setting duration in minutes */\n    const duration = convertToSeconds(itemDuration)/60;\n\n    /* If the key does not exist in object */\n    if (object[key] === undefined){\n        object[key] = {\n            duration,\n            count: 1\n        }\n    } else {\n        /* If key exists, update the values */\n        object[key]['duration'] = object[key]['duration'] ? object[key]['duration'] + duration : duration;\n        object[key]['count'] = object[key]['count'] ? object[key]['count'] + 1 : 1;\n    }\n\n    /* Return updated object */\n    return object;\n}","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Chart from 'chart.js';\nimport { Button, ButtonGroup } from '@material-ui/core';\n\nimport { buildChart1 } from '../../Actions/middleware';\nimport { fetchDataLoading } from '../../Actions';\n\nconst timeUnit = (unit) => {\n    switch (unit) {\n        case 'MINUTES': return 60;\n        case 'HOURS': return 3600;\n        default: return 1;\n    }\n}\n\n\nconst groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    // (rv[x[key]] = (rv[x[key]] || 0) + x.duration)\n    if (rv[x[key]] === undefined) {\n        rv[x[key]] = 0;\n    } else {\n        rv[x[key]] += x.duration\n    }\n    return rv;\n  }, {});\n};\n\nclass DurationChart extends Component {\n    constructor(props) {\n        super(props);\n        this.renderChart = this.renderChart.bind(this)\n    }\n\n    chartRef = React.createRef();\n\n    componentDidMount () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart1();\n        this.props.fetchDataLoading(false);\n    }\n\n    componentDidUpdate () {\n        const { chartData: { data: rawData } } = this.props;\n        \n        this.renderChart(this.chartRef, rawData, 'MINUTES');\n    }\n\n    renderChart(chartRef, rawData, unit) {\n        try {\n\n            const myChartRef = chartRef.current.getContext(\"2d\");\n            const timeUnitNumber = timeUnit(unit);\n            \n            let data = [], labels = [];\n            let chartData = groupBy(rawData, 'date')\n            for(let item in chartData) {\n                const itemDate = new Date(item);\n                labels.push(itemDate.getDate() + ' ' + itemDate.getFullMonth())\n                data.push(parseInt(chartData[item]/timeUnitNumber));\n            }\n            data.reverse();\n            labels.reverse();\n            new Chart(myChartRef, {\n                type: \"line\",\n                data: {\n                    //Bring in data\n                    labels,\n                    datasets: [\n                        {\n                            label: unit,\n                            data\n                        }\n                    ]\n                },\n                options: {\n                    //Customize chart options\n                }\n            });\n        } catch (e) {\n            console.log('Data not ready')\n        }\n    }\n    \n    render() {\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button \n                        onClick={() => this.renderChart(this.chartRef, this.props.chartData.data, 'MINUTES')}\n                    >\n                        Minutes\n                    </Button>\n                    <Button \n                        onClick={() => this.renderChart(this.chartRef, this.props.chartData.data, 'HOURS')}\n                    >\n                        Hours\n                    </Button>\n                </ButtonGroup>\n                \n                <canvas id=\"MyChart\" ref={this.chartRef} />\n            </>\n        )\n    }\n}\n\n// const DurationChart = ({ buildChart}) => {\n//     buildChart();\n//     // const dispatch = useDispatch();\n//     // dispatch(buildChart1);\n//     const chartData = useSelector(state => state.chartReducer.chart1)\n//     console.log('Props of functional component', chartData)\n// }\n\nconst mapStateToProps = (state) => {\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart1,\n        // chartLoaded: state.chartDataLoaded.chart1\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart1\n    },\n    dispatch\n)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DurationChart);","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport {XYPlot, HorizontalBarSeries, XAxis, YAxis } from 'react-vis';\n\nimport { fetchDataLoading } from '../../Actions';\nimport { buildChart4 } from '../../Actions/middleware';\n\nclass ChannelChart extends Component {\n    constructor (props) {\n        super(props);\n        this.renderBarChart = this.renderBarChart.bind(this);\n        this.state = {\n            factor: 'COUNT'\n        }\n    }\n\n    componentDidMount () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart4();\n        this.props.fetchDataLoading(false);\n    }\n\n    renderBarChart () {\n        const factor = this.state.factor.toLowerCase();\n        const { chartData: { data: chartData } } = this.props;\n        const data = [];\n        for(let item in chartData) {\n            data.push({ y: item, x: chartData[item][factor] })\n        }\n        data.sort((a, b) => b.x-a.x);\n        const splicedChartData = data.slice(0, 10);\n        return splicedChartData.reverse();\n    }\n\n    render() {\n        const barChartData = this.renderBarChart();\n        const XAxisTitle = this.state.factor === 'COUNT' ? 'Number of Videos' : 'Minutes Watched';\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button onClick={() => this.setState({factor: 'COUNT'})}>\n                        By Number\n                    </Button>\n                    <Button onClick={() => this.setState({factor: 'DURATION'})}>\n                        By Duration\n                    </Button>\n                </ButtonGroup>\n                <XYPlot\n                    yType=\"ordinal\"\n                    // stackBy=\"x\"\n                    width={800}\n                    height={300}\n                    margin={{left: 200, right: 10, top: 10, bottom: 40}}\n                    >\n                    <XAxis title={XAxisTitle} />\n                    <YAxis />\n                    <HorizontalBarSeries\n                        animation='stiff'\n                        // cluster=\"2015\"\n                        // marginLeft={240}\n                        color=\"#f0f0f0\"\n                        data={barChartData}\n                    />\n                </XYPlot>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart4\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart4\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelChart);","import React, { Component} from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Radar } from 'react-chartjs-2';\nimport { ButtonGroup, Button } from '@material-ui/core';\n\nimport { buildChart2 } from '../../Actions/middleware';\nimport {fetchDataLoading } from '../../Actions';\n\nclass CategoryChart extends Component {\n    constructor (props) {\n        super(props);\n        this.renderPieChart = this.renderPieChart.bind(this);\n        this.state = {\n            factor: 'COUNT'\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart2();\n        this.props.fetchDataLoading(false);\n    }\n\n    renderPieChart () {\n        const { chartData: { data: rawData} } = this.props;\n        const factor = this.state.factor.toLowerCase()\n        const arrayOfCategories = [];\n        for(let item in rawData) {\n            arrayOfCategories.push({ name: item, number: Number(rawData[item][factor]) })\n        }\n        arrayOfCategories.sort((a,b) => b.y - a.y);\n        const topCategories = arrayOfCategories.slice(0, 10);\n        const [labels, data] = [[], []]\n        for(let category of topCategories) {\n            labels.push(category.name);\n            data.push(category.number);\n        }\n\n        const chartData = {\n            labels,\n            datasets: [{\n                label: 'Category',\n                data,\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n            }]\n        }\n        return chartData;\n    }\n\n    render() {\n        const options = {\n            scale: {\n                ticks: { beginAtZero: true },\n            },\n        }\n        const categoryChartData = this.renderPieChart();\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button onClick={() => this.setState({factor: 'COUNT'})}>\n                        By Number\n                    </Button>\n                    <Button onClick={() => this.setState({factor: 'DURATION'})}>\n                        By Duration\n                    </Button>\n                </ButtonGroup>\n               <Radar data={categoryChartData} options={options}/> \n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log('MSTP : ',state)\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart2\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart2\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryChart);","import React from 'react';\nimport {bindActionCreators} from 'redux';\nimport { connect } from 'react-redux';\nimport { Grid } from '@material-ui/core';\n\nimport { fetchDataLoading, fetchDataSuccess, fetchDataFailure } from '../../Actions';\nimport Header from '../../Components/Header/Header';\nimport Card1 from '../../Components/Cards/Card1/Card1';\nimport DurationChart from '../../Components/Duration';\nimport ChannelChart from '../../Components/Channels';\nimport CategoryChart from '../../Components/Categories';\nclass Homepage extends React.Component {\n\n    render() {\n        const { itemLoading } = this.props\n        if(itemLoading) {\n            return <p> Loading......</p>\n        }\n        return (\n            <div style={{width: '80%', margin: 'auto'}}>\n                <Header/>\n                <Grid container spacing={4}>\n                    <Grid item xs={12}>\n                        <Card1>\n                            <h1>Top 10 Most Watched Channels</h1>\n                            <ChannelChart />\n                            {/* Start plotting data. Consider naming charts as simply category, tags, channel, etc. and grouping data accordingly (duration, number together) */}\n                        </Card1>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card1>\n                            <h1>How much YT do you watch every day?</h1>\n                            <DurationChart />\n                        </Card1>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card1>\n                            <h1>A Chart of your 10 Most Watched Categories</h1>\n                            <CategoryChart />\n                        </Card1>\n                    </Grid>\n                    {/* <Grid item xs={6}>\n                        <Card1 onClick={this.ChartChannels}>\n                            Graph 4\n                        </Card1>\n                    </Grid> */}\n                </Grid>\n            </div>\n        )\n    }\n}\n// \"homepage\": \"http://utkarshsingh99.github.io/Googlyzer\",\nconst mapStateToProps = (state) => {\n    return {\n        itemReducer: [...state.itemReducer.items],\n        itemLoading: state.itemLoading,\n        itemLoadingError: state,\n        // chartReducer: state.chartReducer\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        fetchDataSuccess,\n        fetchDataFailure\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Homepage);","import React, { Component } from 'react';\nimport './App.css';\nimport Homepage from './Containers/Homepage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Homepage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './Store';\nimport App from './App';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n"],"sourceRoot":""}