{"version":3,"sources":["Constants/index.js","Reducers/index.js","Store/index.js","Actions/index.js","Actions/middleware.js","Components/Header/Header.js","Components/Cards/Card1/Card1.js","Components/Duration/index.js","Components/Channels/index.js","Components/Categories/index.js","Containers/Homepage/index.js","App.js","index.js"],"names":["initialState","items","chart1","data","loaded","chart2","chart3","chart4","Date","prototype","getFullMonth","this","getMonth","rootReducer","combineReducers","itemReducer","state","arguments","length","undefined","action","type","Object","objectSpread","toConsumableArray","payload","chartReducer","itemLoading","status","itemLoadingError","store","createStore","applyMiddleware","thunk","fetchDataLoading","fetchDataSuccess","fetchDataFailure","convertToSeconds","duration","newDuration","moment","Math","min","asSeconds","buildChart1","dispatch","timeData","durations","map","item","time","date","toDateString","month","year","getFullYear","buildChart2","categoryObj","getDurationAndCountBy","buildChart3","_step","_iterator","_createForOfIteratorHelper","_loop","value","category","forEach","s","n","done","err","e","f","buildChart4","channels","factor","_step2","object","_iterator2","key","search","split","AddOrUpdate","_step3","_iterator3","itemDuration","count","Header","react_default","a","createElement","Fragment","useStyle","makeStyles","root","boxShadow","Card1","_ref","onClickFunction","onClick","children","classes","Card","className","DurationChart","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","chartRef","React","createRef","renderChart","bind","assertThisInitialized","rawData","chartData","unit","myChartRef","current","getContext","timeUnitNumber","timeUnit","labels","reduce","rv","x","itemDate","push","getDate","parseInt","reverse","Chart","datasets","label","options","console","log","_this2","ButtonGroup","style","display","justifyContent","size","aria-label","Button","id","ref","Component","connect","bindActionCreators","ChannelChart","renderBarChart","toLowerCase","y","sort","b","slice","barChartData","XAxisTitle","setState","react_vis_es","yType","width","height","margin","left","right","top","bottom","title","animation","color","CategoryChart","renderPieChart","arrayOfCategories","name","number","Number","Categories_createForOfIteratorHelper","backgroundColor","borderColor","borderWidth","categoryChartData","react_chartjs_2_es","scale","ticks","beginAtZero","Homepage","ChartCategoryByNumber","ChartTimeByDay","ChartCategoryByTime","ChartChannels","Components_Header_Header","Grid","container","spacing","xs","Cards_Card1_Card1","Channels","Duration","Categories","App","Containers_Homepage","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e73f267b.chunk.js","sourcesContent":["export const FETCH_DATA = 'FETCH_DATA';\nexport const FETCH_DATA_LOADING = 'FETCH_DATA_LOADING';\nexport const FETCH_DATA_LOADING_SUCCESS = 'FETCH_DATA_LOADING_SUCCESS';\nexport const FETCH_DATA_LOADING_FAILURE = 'FETCH_DATA_LOADING_FAILURE';\nexport const CHART1_DATA_LOADING_SUCCESS = 'CHART1_DATA_LOADING_SUCCESS';\nexport const CHART2_DATA_LOADING_SUCCESS = 'CHART2_DATA_LOADING_SUCCESS';\nexport const CHART3_DATA_LOADING_SUCCESS = 'CHART3_DATA_LOADING_SUCCESS';\nexport const CHART4_DATA_LOADING_SUCCESS = 'CHART4_DATA_LOADING_SUCCESS';\n\nexport const rootURL = 'https://jsonplaceholder.typicode.com/todos/1';\n\nexport const initialState = {\n    items: [],\n    chart1: {\n        data: [],\n        loaded: false\n    },\n    chart2: {\n        data: {},\n        loaded: false\n    },\n    chart3: {\n        data: {},\n        loaded: false\n    },\n    chart4: {\n        data: {},\n        loaded: false\n    }\n}\n\nDate.prototype.getFullMonth = function () {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n    return months[this.getMonth()];\n}","import {FETCH_DATA,FETCH_DATA_LOADING,FETCH_DATA_LOADING_SUCCESS,FETCH_DATA_LOADING_FAILURE,initialState, CHART1_DATA_LOADING_SUCCESS, CHART2_DATA_LOADING_SUCCESS, CHART3_DATA_LOADING_SUCCESS, CHART4_DATA_LOADING_SUCCESS} from '../Constants';\nimport { combineReducers } from 'redux';\n\nexport const itemReducer = (state = initialState,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                items: [...action.payload]\n            }\n        default:\n            return state;\n    }\n}\n\nexport const chartReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case CHART1_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart1: {...action.payload},\n            }\n        case CHART2_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart2: {...action.payload}\n            }\n        case CHART3_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart3: {...action.payload}\n            }\n        case CHART4_DATA_LOADING_SUCCESS:\n            return {\n                ...state,\n                chart4: {...action.payload}\n            }\n        default:\n            return state;\n    }\n}\n\nexport const itemLoading = (state = false,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING:\n            return action.status\n        default:\n            return state;\n    }\n} \n\nexport const itemLoadingError = (state = false,action) => {\n    switch(action.type) {\n        case FETCH_DATA_LOADING_FAILURE:\n            return action.status\n        default:\n            return state;\n    }\n}\n\nexport const rootReducer = combineReducers({\n    itemReducer,\n    chartReducer,\n    itemLoading,\n    itemLoadingError\n});\n\nexport default rootReducer;\n\n","import { createStore,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n\n//const store = createStore(rootReducer);\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nexport default store;","import {FETCH_DATA_LOADING_SUCCESS, FETCH_DATA_LOADING_FAILURE, FETCH_DATA_LOADING, CHART1_DATA_LOADING_SUCCESS, CHART2_DATA_LOADING_SUCCESS, CHART3_DATA_LOADING_SUCCESS, CHART4_DATA_LOADING_SUCCESS} from '../Constants';\n\nexport const fetchDataLoading = (status) => {\n    return {\n        type: FETCH_DATA_LOADING,\n        status\n    }\n}\n\nexport const fetchDataSuccess = (data) => {\n    return {\n        type: FETCH_DATA_LOADING_SUCCESS,\n        payload: data\n    }\n}\n\nexport const fetchDataFailure = (status) => {\n    return {\n        type: FETCH_DATA_LOADING_FAILURE,\n        status\n    }\n}\n\nexport const fetchChart1 = (data) => {\n    return {\n        type: CHART1_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\nexport const fetchChart2 = (data) => {\n    return {\n        type: CHART2_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\nexport const fetchChart3 = (data) => {\n    return {\n        type: CHART3_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\nexport const fetchChart4 = (data) => {\n    return {\n        type: CHART4_DATA_LOADING_SUCCESS,\n        payload: {\n            data,\n            loaded: true\n        }\n    }\n}\n\n// export const fetchData = (url) => {\n//     return (dispatch) => {\n//         dispatch(fetchDataLoading(true));\n\n//         dispatch(fetchDataSuccess(data.durations));\n//         // dispatch(buildChart1(data.durations));\n//         // dispatch(getCategories(data.durations));\n//         // dispatch(buildChart3(data.durations));\n\n//         dispatch(fetchDataLoading(false));\n//         // fetch(url)\n//         //     .then(response => {\n//         //         dispatch(fetchDataLoading(false));\n//         //         return response;\n//         //     })\n//         //     .then(response => response.json())\n//         //     .then(items => dispatch(fetchDataSuccess(items)))\n//         //     .catch(error => dispatch(fetchDataFailure(error)))\n//     }\n// }","import data from '../Constants/db.json';\nimport { fetchChart1, fetchChart2, fetchChart3, fetchChart4 } from './index';\n\nimport * as moment from 'moment';\n\nconst convertToSeconds = (duration) => {\n    const newDuration = moment.duration(duration, moment.ISO_8601);\n    return Math.min(1800, newDuration.asSeconds());\n}\n\nexport const buildChart1 = () => {\n    // To Plot:\n    // Y-AXIS: duration of watching videos\n    // X-AXIS: day/date/month/year.\n    // TODO: Will probably need to group all dates in one object and sum up durations. \n    // But that would lose the count of the videos watched \n    return dispatch => {\n        const timeData = data.durations.map(item => {\n            const time = new Date(item.time);\n            return {\n                duration: convertToSeconds(item.duration),\n                date: time.toDateString(),\n                month: time.getMonth(),\n                year: time.getFullYear()\n            }\n        });  \n\n        return dispatch(fetchChart1(timeData))\n    }\n}\n\nexport const buildChart2 = () => {\n    // To Plot:\n    // Y-AXIS: Number of videos\n    // X-AXIS: Category\n    return dispatch => {\n        const categoryObj = getDurationAndCountBy('category');\n        dispatch(fetchChart2(categoryObj))    \n    };\n}\n\nexport const buildChart3 = () => {\n    // To Plot:\n    // Y-AXIS: Duration of videos\n    // X-AXIS: Category\n    return dispatch => {\n        const categoryObj = {}\n        for(let item of data.durations) {\n            const duration = convertToSeconds(item.duration);\n            item.category.forEach(category => categoryObj[category] = categoryObj[category] ? categoryObj[category]+duration : duration)\n        }\n        dispatch(fetchChart3(categoryObj))    \n    };\n}\n\nexport const buildChart4 = () => {\n    // To Plot:\n    // Y-AXIS: Number of videos\n    // X-AXIS: Channel\n    return dispatch => {\n        const channels = getDurationAndCountBy('snippet.channelTitle');\n        dispatch(fetchChart4(channels));\n    }\n}\n\nfunction getDurationAndCountBy (factor) {\n    let object = {}, debug = [];\n        for(let item of data.durations) {\n            // Extracting the key value from item object\n            // If factor is category: key = item.category\n            // If factor is snippet.channelTitle: key = item.snippet.channelTitle\n            const key = factor.search(/\\./) !== -1 ? item[factor.split(/\\./)[0]][factor.split(/\\./)[1]] : item[factor];\n\n            // For each item, there is one channelTitle, hence the key will be a string\n            if (typeof key === 'string') {\n                object = AddOrUpdate(object, key, item.duration);\n            } else { // When category factor returns an array of categories for each item\n                for (let eachKey of key) {\n                    object = AddOrUpdate(object, eachKey, item.duration);\n                }\n            } \n        }\n        return object;\n}\n\nfunction AddOrUpdate(object, key, itemDuration) {\n    // Setting duration in minutes\n    const duration = convertToSeconds(itemDuration)/60;\n    if (object[key] === undefined){\n        object[key] = {\n            duration,\n            count: 1\n        }\n    } else {\n        object[key]['duration'] = object[key]['duration'] ? object[key]['duration'] + duration : duration;\n        object[key]['count'] = object[key]['count'] ? object[key]['count'] + 1 : 1;\n    }\n    return object;\n}","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <>\n        <h1>Visualizing the YouTube Data of</h1>\n        <h2>Utkarsh Singh</h2>\n        <hr></hr>\n        </>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Card, CardContent, makeStyles, Typography } from '@material-ui/core';\n\nconst useStyle = makeStyles(() => ({\n    root: {\n        // height: '200px',\n        boxShadow: '5px 10px 5px #aaaaaa'\n    }\n}))\n\nconst Card1 = ({ onClick: onClickFunction, children }) => {\n    const classes = useStyle();\n    return (\n        <Card onClick={onClickFunction ? () => onClickFunction() : null} className={classes.root}>\n            {/* <CardContent> */}\n                    {children}\n            {/* </CardContent> */}\n        </Card>\n    )\n}\n\nexport default Card1;","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Chart from 'chart.js';\nimport { Button, ButtonGroup } from '@material-ui/core';\n\nimport { buildChart1 } from '../../Actions/middleware';\nimport { fetchDataLoading } from '../../Actions';\n\nconst timeUnit = (unit) => {\n    switch (unit) {\n        case 'MINUTES': return 60;\n        case 'HOURS': return 3600;\n    }\n}\n\n\nconst groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    // (rv[x[key]] = (rv[x[key]] || 0) + x.duration)\n    if (rv[x[key]] === undefined) {\n        rv[x[key]] = 0;\n    } else {\n        rv[x[key]] += x.duration\n    }\n    return rv;\n  }, {});\n};\n\nclass DurationChart extends Component {\n    constructor(props) {\n        super(props);\n        this.renderChart = this.renderChart.bind(this)\n    }\n\n    chartRef = React.createRef();\n\n    componentDidMount () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart1();\n        this.props.fetchDataLoading(false);\n    }\n\n    componentDidUpdate () {\n        const { chartData: { data: rawData } } = this.props;\n        \n        this.renderChart(this.chartRef, rawData, 'MINUTES');\n    }\n\n    renderChart(chartRef, rawData, unit) {\n        try {\n\n            const myChartRef = chartRef.current.getContext(\"2d\");\n            const timeUnitNumber = timeUnit(unit);\n            \n            let data = [], labels = [];\n            let chartData = groupBy(rawData, 'date')\n            for(let item in chartData) {\n                const itemDate = new Date(item);\n                labels.push(itemDate.getDate() + ' ' + itemDate.getFullMonth())\n                data.push(parseInt(chartData[item]/timeUnitNumber));\n            }\n            data.reverse();\n            labels.reverse();\n            new Chart(myChartRef, {\n                type: \"line\",\n                data: {\n                    //Bring in data\n                    labels,\n                    datasets: [\n                        {\n                            label: unit,\n                            data\n                        }\n                    ]\n                },\n                options: {\n                    //Customize chart options\n                }\n            });\n        } catch (e) {\n            console.log('Data not ready')\n        }\n    }\n    \n    render() {\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button \n                        onClick={() => this.renderChart(this.chartRef, this.props.chartData.data, 'MINUTES')}\n                    >\n                        Minutes\n                    </Button>\n                    <Button \n                        onClick={() => this.renderChart(this.chartRef, this.props.chartData.data, 'HOURS')}\n                    >\n                        Hours\n                    </Button>\n                </ButtonGroup>\n                \n                <canvas id=\"MyChart\" ref={this.chartRef} />\n            </>\n        )\n    }\n}\n\n// const DurationChart = ({ buildChart}) => {\n//     buildChart();\n//     // const dispatch = useDispatch();\n//     // dispatch(buildChart1);\n//     const chartData = useSelector(state => state.chartReducer.chart1)\n//     console.log('Props of functional component', chartData)\n// }\n\nconst mapStateToProps = (state) => {\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart1,\n        // chartLoaded: state.chartDataLoaded.chart1\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart1\n    },\n    dispatch\n)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DurationChart);","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport {XYPlot, HorizontalBarSeries, XAxis, YAxis } from 'react-vis';\n\nimport { fetchDataLoading } from '../../Actions';\nimport { buildChart4 } from '../../Actions/middleware';\n\nclass ChannelChart extends Component {\n    constructor (props) {\n        super(props);\n        this.renderBarChart = this.renderBarChart.bind(this);\n        this.state = {\n            factor: 'COUNT'\n        }\n    }\n\n    componentDidMount () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart4();\n        this.props.fetchDataLoading(false);\n    }\n\n    renderBarChart () {\n        const factor = this.state.factor.toLowerCase();\n        const { chartData: { data: chartData } } = this.props;\n        const data = [];\n        for(let item in chartData) {\n            data.push({ y: item, x: chartData[item][factor] })\n        }\n        data.sort((a, b) => b.x-a.x);\n        const splicedChartData = data.slice(0, 10);\n        return splicedChartData.reverse();\n    }\n\n    render() {\n        const barChartData = this.renderBarChart();\n        const XAxisTitle = this.state.factor === 'COUNT' ? 'Number of Videos' : 'Minutes Watched';\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button onClick={() => this.setState({factor: 'COUNT'})}>\n                        By Number\n                    </Button>\n                    <Button onClick={() => this.setState({factor: 'DURATION'})}>\n                        By Duration\n                    </Button>\n                </ButtonGroup>\n                <XYPlot\n                    yType=\"ordinal\"\n                    // stackBy=\"x\"\n                    width={800}\n                    height={300}\n                    margin={{left: 200, right: 10, top: 10, bottom: 40}}\n                    >\n                    <XAxis title={XAxisTitle} />\n                    <YAxis />\n                    <HorizontalBarSeries\n                        animation='stiff'\n                        // cluster=\"2015\"\n                        // marginLeft={240}\n                        color=\"#f0f0f0\"\n                        data={barChartData}\n                    />\n                </XYPlot>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart4\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart4\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelChart);","import React, { Component} from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Radar } from 'react-chartjs-2';\nimport { ButtonGroup, Button } from '@material-ui/core';\n\nimport { buildChart2, buildChart3 } from '../../Actions/middleware';\nimport {fetchDataLoading } from '../../Actions';\n\nclass CategoryChart extends Component {\n    constructor (props) {\n        super(props);\n        this.renderPieChart = this.renderPieChart.bind(this);\n        this.state = {\n            factor: 'COUNT'\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart2();\n        this.props.fetchDataLoading(false);\n    }\n\n    renderPieChart () {\n        const { chartData: { data: rawData} } = this.props;\n        const factor = this.state.factor.toLowerCase()\n        const arrayOfCategories = [];\n        for(let item in rawData) {\n            arrayOfCategories.push({ name: item, number: Number(rawData[item][factor]) })\n        }\n        arrayOfCategories.sort((a,b) => b.y - a.y);\n        const topCategories = arrayOfCategories.slice(0, 10);\n        const [labels, data] = [[], []]\n        for(let category of topCategories) {\n            labels.push(category.name);\n            data.push(category.number);\n        }\n\n        const chartData = {\n            labels,\n            datasets: [{\n                label: 'Category',\n                data,\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n            }]\n        }\n        return chartData;\n    }\n\n    render() {\n        const options = {\n            scale: {\n                ticks: { beginAtZero: true },\n            },\n        }\n        const categoryChartData = this.renderPieChart();\n        return (\n            <>\n                <ButtonGroup \n                    style={{ display: 'flex', justifyContent: 'center'}} \n                    size=\"large\"\n                    aria-label=\"large outlined primary button group\">\n                    <Button onClick={() => this.setState({factor: 'COUNT'})}>\n                        By Number\n                    </Button>\n                    <Button onClick={() => this.setState({factor: 'DURATION'})}>\n                        By Duration\n                    </Button>\n                </ButtonGroup>\n               <Radar data={categoryChartData} options={options}/> \n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log('MSTP : ',state)\n    return {\n        itemLoading: state.itemLoading,\n        chartData: state.chartReducer.chart2\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        buildChart2,\n        buildChart3,\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryChart);","import React from 'react';\nimport {bindActionCreators} from 'redux';\nimport { connect } from 'react-redux';\nimport { Grid } from '@material-ui/core';\n\nimport { fetchDataLoading, fetchDataSuccess, fetchDataFailure } from '../../Actions';\nimport { buildChart1, buildChart2, buildChart3, buildChart4 } from '../../Actions/middleware';\nimport Header from '../../Components/Header/Header';\nimport Card1 from '../../Components/Cards/Card1/Card1';\nimport DurationChart from '../../Components/Duration';\nimport ChannelChart from '../../Components/Channels';\nimport CategoryChart from '../../Components/Categories';\nclass Homepage extends React.Component {\n    constructor (props) {\n        super(props);\n        this.ChartCategoryByNumber = this.ChartCategoryByNumber.bind(this);\n        this.ChartTimeByDay = this.ChartTimeByDay.bind(this);\n        this.ChartCategoryByTime = this.ChartCategoryByTime.bind(this);\n        this.ChartChannels = this.ChartChannels.bind(this);\n    }\n    \n    ChartCategoryByNumber () { \n        this.props.fetchDataLoading(true);\n        this.props.buildChart1();\n        this.props.fetchDataLoading(false);\n    }\n\n    ChartTimeByDay () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart2();\n        this.props.fetchDataLoading(false);\n    }\n\n    ChartCategoryByTime () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart3();\n        this.props.fetchDataLoading(false);\n    }\n\n    ChartChannels () {\n        this.props.fetchDataLoading(true);\n        this.props.buildChart4();\n        this.props.fetchDataLoading(false);\n    }\n\n    render() {\n        const { itemLoading } = this.props\n        if(itemLoading) {\n            return <p> Loading......</p>\n        }\n        return (\n            <div style={{width: '80%', margin: 'auto'}}>\n                <Header/>\n                <Grid container spacing={4}>\n                    <Grid item xs={12}>\n                        <Card1 \n                            // onClick={this.ChartCategoryByNumber}\n                        >\n                            <h1>Top 10 Most Watched Channels</h1>\n                            <ChannelChart />\n                            {/* Start plotting data. Consider naming charts as simply category, tags, channel, etc. and grouping data accordingly (duration, number together) */}\n                        </Card1>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card1>\n                            <h1>How much YT do you watch every day?</h1>\n                            <DurationChart />\n                        </Card1>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card1>\n                            <h1>A Chart of your 10 Most Watched Categories</h1>\n                            <CategoryChart />\n                        </Card1>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Card1 onClick={this.ChartChannels}>\n                            Graph 4\n                        </Card1>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        itemReducer: [...state.itemReducer.items],\n        itemLoading: state.itemLoading,\n        itemLoadingError: state,\n        // chartReducer: state.chartReducer\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    {\n        fetchDataLoading,\n        fetchDataSuccess,\n        fetchDataFailure,\n        buildChart1,\n        buildChart2,\n        buildChart3,\n        buildChart4\n    },\n    dispatch\n)\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Homepage);","import React, { Component } from 'react';\nimport './App.css';\nimport Homepage from './Containers/Homepage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Homepage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './Store';\nimport App from './App';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n"],"sourceRoot":""}